<?php
use Phalcon\Mvc\Micro;
use Phalcon\Validation;
use Phalcon\Validation\Validator\PresenceOf;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use Phalcon\Validation\Validator\Email;
use Aws\Credentials\CredentialProvider;
use Aws\Ses\SesClient;
use Aws\Ses\Exception\SesException;
require BASE_PATH.'/vendor/mailin.php';
require BASE_PATH.'/vendor/autoload.php';
require '../vendor/autoload.php';
require BASE_PATH.'/vendor/Crypto.php';
require BASE_PATH.'/vendor/class.phpmailer.php';
class SchoolsController extends \Phalcon\Mvc\Controller {
	public function index() {
	}
    
    public function viewall(){
        $schooldata = Schools::find();
        if ($schooldata) :
			return $this->response->setJsonContent ([ 
					'status' => true,
					'data' =>$schooldata
			]);
		 else :
			return $this->response->setJsonContent ( [ 
					'status' => false,
					'message' => 'Failed',
				        "data"=>array() 
			] );
		endif;
    }

    public function getbyid(){
        $input_data = $this->request->getJsonRawBody ();
		$headers = $this->request->getHeaders ();
		if (empty ( $headers ['Token'] )) {
			return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "Please give the token"
			] );
        }
        $schoolarray = array();
        $parentarray = array();
        $childarray = array();
        $getSchool =  Schools::findFirstByid($input_data -> school_id);
        if ($getSchool) :
            $data3['first_name'] = '';
            $childarray[] = $data3;
            $data2['first_name'] = '';
            $data2['childInfo'] = $childarray;
            $parentarray[] = $data2;
            // foreach($getSchool as $value){
                $data['id'] = $getSchool -> id;
                $data['school_name'] = $getSchool -> school_name;
                $data['phone_number'] = $getSchool -> phone_number;
                $data['principal_name'] = $getSchool -> principal_name;
                $data['principal_mobile'] = $getSchool -> principal_mobile;
                $data['parentInfo'] =  $parentarray;
                $schoolarray[] = $data;

            // }
			return $this->response->setJsonContent ([ 
					'status' => true,
					'data' =>$schoolarray
			]);
		 else :
			return $this->response->setJsonContent ( [ 
					'status' => false,
					'message' => 'Failed'
			] );
		endif;
    }


    public function checkUserEmail(){
        $input_data = $this->request->getJsonRawBody ();
        $headers = $this->request->getHeaders ();
		if (empty ( $headers ['Token'] )) {
			return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "Please give the token"
			] );
        } else {
            $user = Users::findFirstByemail($input_data -> email);
            if($user){
                return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "This email address is already in use. Please enter a different one."
			    ] );
            } else {
                return $this->response->setJsonContent ( [
					"status" => true,
					"message" => ""
			    ] );
            }
        }
    }

    public function checkUserMobile(){
        $input_data = $this->request->getJsonRawBody ();
        $headers = $this->request->getHeaders ();
		if (empty ( $headers ['Token'] )) {
			return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "Please give the token"
			] );
        } else {
            $user = Users::findFirstBymobile($input_data -> mobile);
            if($user){
                return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "This mobile number address is already in use. Please enter a different one."
			    ] );
            } else {
                return $this->response->setJsonContent ( [
					"status" => true,
					"message" => ""
			    ] );
            }
        }
    }


    public function setregistationdate(){
        $input_data = $this->request->getJsonRawBody ();
        $headers = $this->request->getHeaders ();
		if (empty ( $headers ['Token'] )) {
			return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "Please give the token"
			] );
        } else {
            $date = SchoolRegistrationDate::findFirstByschool_id($input_data -> school_id);
            $school = Schools::findFirstByid($input_data -> school_id);
            if(!$date){
                $date = new SchoolRegistrationDate();
            }
            $date -> school_id = $input_data -> school_id;
            $date -> start_date = $input_data -> fromdate;
            $date -> end_date = $input_data -> todate;
            $date -> status = $input_data -> status;
            if(!$date -> save()){
                return $this->response->setJsonContent ( [
			"status" => false,
			"message" => "You need to set registration date for " . $school -> school_name
		] );
            } else {
                if($input_data -> status == '2'){
                    return $this->response->setJsonContent ( [
                        "status" => false,
                        "message" => "You need to set registration date for " . $school -> school_name
                    ] );
                } else {
                    return $this->response->setJsonContent ( [
                        "status" => true,
                        "message" => "The registration date has been set successfully"
                    ] );
                }
                
            }
        }
    }

    public function getrgisterDatebyschoolid(){
        $input_data = $this->request->getJsonRawBody ();
        $headers = $this->request->getHeaders ();
		if (empty ( $headers ['Token'] )) {
			return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "Please give the token"
			] );
        } else {
            $date = SchoolRegistrationDate::findFirstByschool_id($input_data -> school_id);
            $school = Schools::findFirstByid($input_data -> school_id);
            if($date){
                if($date -> status == '2'){
                    return $this->response->setJsonContent ( [
                        "status" => false,
                        "message" => "You need to set registration date for " . $school -> school_name
                    ] );
                } else {
                    return $this->response->setJsonContent ( [
                        "status" => true,
                        "message" => "The registration date has been set successfully"
                    ] );
                }
            }
        }
    }


    public function getInformationByid(){
        $input_data = $this->request->getJsonRawBody ();
		$headers = $this->request->getHeaders ();
		if (empty ( $headers ['Token'] )) {
			return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "Please give the token"
			] );
        }
        $schoolarray = array();
       
       // $childarray = array();
        $getSchool =  Schools::findFirstByid($input_data -> school_id);
        if ($getSchool) :
                $getuservalue = $this->modelsManager->createBuilder ()->columns ( array (
                    'Users.id as id',
                    'Users.first_name as first_name',
                    'Users.email as email',
                    'Users.status as status',
                 ))->from("SchoolParentMap")
                 ->leftjoin('Users','Users.id = SchoolParentMap.user_id')
                 ->inwhere('SchoolParentMap.school_id',array($input_data -> school_id))
                 ->getQuery()->execute ();
                 $parentarray = array();
                foreach($getuservalue as $value){
                    $data2['id'] = $value -> id;
                    $data2['first_name'] = $value -> first_name;
                    $data2['email'] = $value -> email;
                    if($value -> status == 1){
                        $data2['status'] = 'Registered';
                    } else {
                        $data2['status'] = 'Not Registered';
                    }
                    $parentarray[] = $data2;
                }
                $data['id'] = $getSchool -> id;
                $data['school_name'] = $getSchool -> school_name;
                $data['phone_number'] = $getSchool -> phone_number;
                $data['principal_name'] = $getSchool -> principal_name;
                $data['principal_mobile'] = $getSchool -> principal_mobile;
                $data['parentInfo'] =  $parentarray;
                $schoolarray[] = $data;

            // }
			return $this->response->setJsonContent ([ 
					'status' => true,
					'data' =>$schoolarray
			]);
		 else :
			return $this->response->setJsonContent ( [ 
					'status' => false,
					'message' => 'Failed'
			] );
		endif;
    }

    public function getSchoolUser(){
        $input_data = $this->request->getJsonRawBody ();
		$headers = $this->request->getHeaders ();
		if (empty ( $headers ['Token'] )) {
			return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "Please give the token"
			] );
        }
        $user_id =  $input_data -> user_id;
        $getSchool = $this->modelsManager->createBuilder ()->columns ( array (
           'Schools.id as id',
           'Schools.school_name as school_name',
        ))->from("SchoolUserMap")
        ->leftjoin('Schools','Schools.id = SchoolUserMap.schools_id')
        ->inwhere('SchoolUserMap.users_id',array($user_id))
        ->getQuery()->execute ();
        if ($getSchool) :
			return $this->response->setJsonContent ([ 
					'status' => true,
					'data' =>$getSchool
			]);
		 else :
			return $this->response->setJsonContent ( [ 
					'status' => false,
					'message' => 'Failed'
			] );
		endif;
    }

    public function getSchoolFilter(){
        $input_data = $this->request->getJsonRawBody ();
		$headers = $this->request->getHeaders ();
		if (empty ( $headers ['Token'] )) {
			return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "Please give the token"
			] );
        }
        $user_id =  $input_data -> user_id;
        $getSchool = $this->modelsManager->createBuilder ()->columns ( array (
           'Schools.id as id',
           'Schools.school_name as school_name',
        ))->from("SchoolUserMap")
        ->leftjoin('Schools','Schools.id = SchoolUserMap.schools_id')
        ->inwhere('SchoolUserMap.users_id',array($user_id))
        ->getQuery()->execute ();
        if ($getSchool) :
			return $this->response->setJsonContent ([ 
					'status' => true,
					'data' =>$getSchool
			]);
		 else :
			return $this->response->setJsonContent ( [ 
					'status' => false,
					'message' => 'Failed'
			] );
		endif;
    }


  public function saveExcel(){
        $input_data = $this->request->getJsonRawBody ();
		$headers = $this->request->getHeaders ();
		if (empty ( $headers ['Token'] )) {
			return $this->response->setJsonContent ( [
					"status" => false,
					"message" => "Please give the token"
			] );
        }
        $tmpfname = '/HDD/public/api_school/public/
excel/writingbigcasea.xlsx';
		$excelReader = PhpOffice\PhpSpreadsheet\IOFactory::createReaderForFile($tmpfname);
		return $this->response->setJsonContent ( [
					"status" => false,
					"message" => $excelReader			] );

		$excelReader->setReadDataOnly(true);
		$excelObj = $excelReader->load($tmpfname);
		$worksheet = $excelObj->getSheet(0);
		$lastRow = $worksheet->getHighestRow();
        $lastCol = $worksheet->getHighestColumn();
        $getArray = array();
        for ($row = 6; $row <= $lastRow; $row++) {
            $dual_column = 1;
           for($x = 'B'; $x != $lastCol; $x++){
               $y =  $x.''.$row;
               $data1[] = $worksheet->getCell($y)->getValue();
                
            }
                $user = Users::findFirstByemail($worksheet->getCell('F'.$row)->getValue());
                if(!$user){
                    $user = new Users ();
                    $user->id = $this->usersid->getNewId("users");
                    $user->parent_type = 'father';
                    $user->first_name = $worksheet->getCell('D'.$row)->getValue();
                    $user->last_name = $worksheet->getCell('E'.$row)->getValue();
                    $user->user_type = 'parent';
                    $user->email = $worksheet->getCell('F'.$row)->getValue();;
                    $user->photo = 'https://s3.ap-south-1.amazonaws.com/illustration.nidarachildren.com/assets/kids/photo/icon.png';
                    $user->mobile = $worksheet->getCell('G'.$row)->getValue();
                }
				$user->created_at = date ( 'Y-m-d H:i:s' );
				$user->created_by = $input_data->school_id;
				$user->status = 2;
				$user->act_status = 2;
				$user->modified_at = date ( 'Y-m-d H:i:s' );
				if(!$user->save()){
					return $this->response->setJsonContent([
						'status' => false,
						'message' => "Please upload the excel format as per NC standard. "
					] );
				}else {
                    $kidprofile = new NidaraKidProfile ();
						$kidprofile->id = $this->kididgen->getNewId ( "nidarakidprofile" );
						$kidprofile->first_name = $worksheet->getCell('H'.$row)->getValue();
						if (! empty ( $childvalue->middle_name )) {
							$kidprofile->middle_name = $childvalue->middle_name;
						}
						$kidprofile->last_name = $worksheet->getCell('I'.$row)->getValue();
						$kidprofile->date_of_birth = date('Y-m-d');
						if(!empty($input_data->age)){
							$kidprofile->age = $childvalue->age;
						}
						$kidprofile->gender = $worksheet->getCell('K'.$row)->getValue();
						$kidprofile->height = '0';
						$kidprofile->weight = '0';
						$kidprofile->grade = $worksheet->getCell('J'.$row)->getValue();
						$kidprofile->created_at = date ( 'Y-m-d H:i:s' );
						$kidprofile->created_by = $user -> id;
						$kidprofile->modified_at = date ( 'Y-m-d H:i:s' );
						$kidprofile->status = 2;
						$kidprofile->cancel_subscription = 1;
						if (empty ( $childvalue->child_photo )) {
							$gender = $childvalue->gender;
							if ($gender == 'male') {
								$kidprofile->child_photo = 'https://s3.amazonaws.com/nidara-dev/dev-files/no_image_male.png';
							} else {
								$kidprofile->child_photo = 'https://s3.amazonaws.com/nidara-dev/dev-files/no_image_female.png';
							}
						} 
						if (!$kidprofile->save ()) {
							return $this->response->setJsonContent([
								'status' => false,
								'message' => "Please upload the excel format as per NC standard. ",
								'data' => $kidprofile
							] );
						}
						else{
							$kid_guide = new KidGuidedLearningMap ();
							$kid_guide->id = $this->kididgen->getNewId ( "nidarakidlearningmap" );
							$kid_guide->nidara_kid_profile_id = $kidprofile->id;
							$kid_guide->guided_learning_id = $kidprofile->grade;
							$kid_guide->save ();
							$parentsmap = new KidParentsMap ();
							$parentsmap->id = $this->kididgen->getNewId ( "kidparentsmap" );
							$parentsmap->nidara_kid_profile_id = $kidprofile->id;
							$parentsmap->users_id = $user -> id;
							$parentsmap->save();
                        }
                    $parentmap = SchoolParentMap::findFirstByuser_id($user -> id);
                    if(!$parentmap){
                        $parentmap = new SchoolParentMap();
                        $parentmap -> user_id = $user -> id;
                    }
					$parentmap -> school_id = $input_data -> school_id;
					if(!$parentmap -> save()){
						return $this->response->setJsonContent([
							'status' => false,
							'message' => "Please upload the excel format as per NC standard. "
						] );
					}
                }
           
        }
        return $this->response->setJsonContent ( [
                "status" => true,
                "message" => "File uploaded successfully"
        ] );
    } 
	
}
